setwd("C:/Users/marco/OneDrive/UNIMIB_DataScience/99-PROJECTS/HDDA_Project/HDDA_project")
library(dplyr)
library(ggplot2)
library(plotly)
library(gmodels)
library(rpart)
library(caret)
library(rpart.plot)
library(vip)
library(pdp)
library(tibble)
library(forcats)
library(doParallel)
library(foreach)
data<- read.csv("/Users/lorenzobruni/Desktop/WA_Fn-UseC_-Telco-Customer-Churn.csv")
data <- read.csv("churn.csv")
data <- na.omit(data)
library(dplyr)
library(ggplot2)
library(plotly)
library(gmodels)
library(rpart)
library(caret)
library(rpart.plot)
library(vip)
library(pdp)
library(tibble)
library(forcats)
library(doParallel)
library(foreach)
dim(data)
str(data)
library(dplyr)
library(ggplot2)
library(plotly)
library(gmodels)
library(rpart)
library(caret)
library(rpart.plot)
library(vip)
library(pdp)
library(tibble)
library(forcats)
library(doParallel)
library(foreach)
# Remo
data <- read.csv("churn.csv")
data <- na.omit(data)
dim(data)
str(data)
summary(data$tenure)
sd(data$tenure)
ggplot(data = data, aes(x = "", y = tenure)) +
geom_boxplot(width = 0.4, fill = "white") +
labs(title = 'Tenure distribution',
y='Tenure',x='')+
coord_cartesian()
df <- data %>%
group_by(Churn) %>%
summarise(counts = n())
ggplot(df, aes(x = Churn, y = counts)) +
geom_bar(fill = "#0073C2FF", stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
labs(title = 'Churn distribution')
ggplot(data = data, aes(x=Churn,y=tenure, fill=Churn)) +
geom_boxplot()+
scale_fill_brewer(palette="Green") +
labs(title = 'Churn vs tenure',
y='tenure',x='Churn')
ggplot(data = data, aes(x=Churn,y=TotalCharges, fill=Churn)) +
geom_boxplot()+
scale_fill_brewer(palette="Green") +
labs(title = 'Churn vs TotalCharges',
y='TotalCharges',x='Churn')
ggplot(data = data, aes(x=Churn,y=MonthlyCharges, fill=Churn)) +
geom_boxplot()+
scale_fill_brewer(palette="Green") +
labs(title = 'Churn vs MonthlyCharges',
y='MonthlyCharges',x='Churn')
data <- subset(data,select=-c(customerID, Churn, MultipleLines, OnlineSecurity, OnlineBackup, DeviceProtection, TotalCharges, TechSupport, StreamingTV, StreamingMovies))
set.seed(1234)
split <- sample(nrow(data), floor(0.7*nrow(data)))
traindf <- data[split,]
testdf <-  data[-split,]
fit <- rpart(
formula = tenure ~ .,
data    = traindf,
method  = "anova"
)
rpart.plot(fit)
plotcp(fit)
pruned <- prune(fit, cp=0.031)
preds <- predict(pruned, testdf)
rmse <- RMSE(
pred = preds,
obs = testdf$tenure
)
rmse
fit$variable.importance %>%
data.frame() %>%
rownames_to_column(var = "Feature") %>%
rename(Overall = '.') %>%
ggplot(aes(x = fct_reorder(Feature, Overall), y = Overall)) +
geom_pointrange(aes(ymin = 0, ymax = Overall), color = "cadetblue", size = .3) +
theme_minimal() +
coord_flip() +
labs(x = "", y = "", title = "Variable Importance with Simple Regression")
set.seed(1234)
bag_model <- train(
tenure ~ .,
data = traindf,
nbagg = 100,
trControl = trainControl(method = "cv", number = 10),
method = "treebag",
control = rpart.control(minsplit = 2, cp = 0)
)
bag_model
cs_preds_bag <- bind_cols(
Predicted = predict(bag_model, newdata = testdf),
Actual = testdf$tenure
)
(cs_rmse_bag <- RMSE(pred = cs_preds_bag$Predicted, obs = cs_preds_bag$Actual))
plot(varImp(bag_model), main="Variable Importance with Bagging")
knitr::opts_chunk$set(echo = TRUE)
# Import packages
library(dplyr)
library(ggplot2)
library(plotly)
library(gmodels)
library(rpart)
library(caret)
library(rpart.plot)
library(vip)
library(pdp)
library(tibble)
library(forcats)
library(doParallel)
library(foreach)
# Import packages
library(dplyr)
library(ggplot2)
library(plotly)
library(gmodels)
library(rpart)
library(caret)
library(rpart.plot)
library(vip)
library(pdp)
library(tibble)
library(forcats)
library(doParallel)
library(foreach)
data <- na.omit(data)
# Import data
data <- read.csv("churn.csv")
data <- na.omit(data)
head(data)
str(data)
head(data)
summary(data)
summary(data$Churn)
data$Churn
is.factor((data$Churn))
factor(data$Churn)
str(factor(data$Churn))
data$Churn <-factor(data$Churn))
data$Churn <-factor(data$Churn)
str(data)
ggplot(data = data, aes(x = "", y = Churn)) +
geom_boxplot(width = 0.4, fill = "white") +
labs(title = 'Churn distribution',
y='Churn',x='')+
coord_cartesian()
ggplot(data = data, aes(x = "", y = Churn)) +
geom_histogram(width = 0.4, fill = "white") +
labs(title = 'Churn distribution',
y='Churn',x='')+
coord_cartesian()
ggplot(data = data, aes(x = "", y = Churn)) +
geom_histogram(stat = 'bin')+
labs(title = 'Churn distribution',
y='Churn',x='')+
coord_cartesian()
ggplot(data = data, aes( y = Churn)) +
geom_histogram(stat = 'bin')+
labs(title = 'Churn distribution',
y='Churn',x='')+
coord_cartesian()
ggplot(data = data, aes( y = Churn), stat(count)) +
geom_histogram(stat = 'bin')+
labs(title = 'Churn distribution',
y='Churn',x='')+
coord_cartesian()
hist(data$Churn)
hist(data$Churn, stat(data$Churn))
plot(dat$churn)
plot(data$Churn)
df <- data %>%
group_by(Churn) %>%
summarise(counts = n())
ggplot(df, aes(x = Churn, y = counts)) +
geom_bar(fill = "#0073C2FF", stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
labs(title = 'Churn distribution')
head(data)
data <- subset(data,select=-c(customerID, MultipleLines, OnlineSecurity, OnlineBackup, DeviceProtection, TotalCharges, TechSupport, StreamingTV, StreamingMovies))
head(data)
data <- sapply(data, as.factor())
str(data)
str(data)
data[,categorical_var] <- lapply(data[,categorical_var] , as.factor)
categorical_var = c("gender", "Partner", "Dependents", "PhoneService", "InternetService", "Contract", "PaperlessBilling, PaymentMethod")
data[,categorical_var] <- lapply(data[,categorical_var] , as.factor)
categorical_var = c("gender", "Partner", "Dependents", "PhoneService", "InternetService", "Contract", "PaperlessBilling", "PaymentMethod")
data[,categorical_var] <- lapply(data[,categorical_var] , as.factor)
str(data)
summary(data)
categorical_var = c("gender", "SeniorCitizen", "Partner", "Dependents", "PhoneService", "InternetService", "Contract", "PaperlessBilling", "PaymentMethod")
data[,categorical_var] <- lapply(data[,categorical_var] , as.factor)
str(data)
summary(data)
barplot(prop.table(table(data$Churm)),
col = rainbow(2),
ylim = c(0, 0.7),
main = "Class Distribution")
barplot(prop.table(table(data$Churn)),
col = rainbow(2),
ylim = c(0, 0.7),
main = "Class Distribution")
df <- data %>%
group_by(Churn) %>%
summarise(counts = n())
ggplot(df, aes(x = Churn, y = counts)) +
geom_bar(fill = "#0073C2FF", stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
labs(title = 'Churn distribution')
barplot(prop.table(table(data$Churn)),
col = rainbow(2),
ylim = c(0, 1),
main = "Class Distribution")
df <- data %>%
group_by(Churn) %>%
summarise(counts = n())
ggplot(prop.table(table(df) +
geom_bar(fill = "#0073C2FF", stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
labs(title = 'Churn distribution')
df <- data %>%
group_by(Churn) %>%
summarise(counts = n())
ggplot(prop.table(table(df), +
geom_bar(fill = "#0073C2FF", stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
labs(title = 'Churn distribution')
df <- data %>%
group_by(Churn) %>%
summarise(counts = n())
ggplot(prop.table(table(df), +
geom_bar(fill = "#0073C2FF", stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
labs(title = 'Churn distribution')
df <- data %>%
group_by(Churn) %>%
summarise(counts = n())
ggplot(df, aes(x = Churn, y = counts)) +
geom_bar(fill = "#0073C2FF", stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
labs(title = 'Churn distribution')
table(train$Churn)
table(data$Churn)
attach(data)
set.seed(1234)
split <- sample(nrow(data), floor(0.7*nrow(data)))
traindf <- data[split,]
testdf <-  data[-split,]
install.packages("ROSE")
library(ROSE)
data_ROSE <- ROSE(Churn ~ ., data = traindf, seed = 1)$data
data_ROSE
table(data_ROSE$Churn)
traindf_ROSE <- ROSE(Churn ~ ., data = traindf, seed = 1)$data
table(traindf$Churn)
table(traindf_ROSE$Churn)
barplot(prop.table(table(traindf_ROSE$Churn)),
col = rainbow(2),
ylim = c(0, 1),
main = "Class Distribution")
fit <- rpart(
formula = Churn ~ .,
data    = traindf_ROSE,
method = "class"
)
rpart.plot(fit)
plotcp(fit)
fit$variable.importance %>%
data.frame() %>%
rownames_to_column(var = "Feature") %>%
rename(Overall = '.') %>%
ggplot(aes(x = fct_reorder(Feature, Overall), y = Overall)) +
geom_pointrange(aes(ymin = 0, ymax = Overall), color = "cadetblue", size = .3) +
theme_minimal() +
coord_flip() +
labs(x = "", y = "", title = "Variable Importance with Simple Regression")
str(traindf_ROSE)
fit <- rpart(
formula = Churn ~ .,
data    = traindf_ROSE,
method = "class"
)
rpart.plot(fit)
str(traindf_ROSE$InternetService)
traindf_ROSE$InternetService
pruned <- prune(fit, cp=0.016)
preds <- predict(pruned, testdf)
rmse <- RMSE(
pred = preds,
obs = testdf$tenure
)
rmse
preds <- predict(pruned, testdf)
rpart.plot(fit, extra = 106)
rpart.plot(fit, extra = 101)
rpart.plot(fit, extra = 106)
fit <- rpart(
formula = tenure ~.,
data    = traindf,
method  = "anova"
)
rpart.plot(fit, extra = 106)
rpart.plot(fit, extra=106)
fit <- rpart(
formula = Churn ~ .,
data    = traindf_ROSE,
method = "class"
)
rpart.plot(fit, extra=106)
preds <- predict(pruned, testdf, type = "class")
result <- table(testdf$Churn, preds)
result <- table(testdf$Churn, preds)
result
sum(diag(result)) / sum(result)
table(testdf$Churn)
table(traindf$Churn)
table(traindf_ROSE$Churn)
summaty(fit)
summary(fit)
cm <- confusionMatrix(preds, reference =testdf$Churn)
cm
cm <- confusionMatrix(preds, reference =testdf$Churn, mode="prec_recall")
cm
rpart.plot(fit, stop("no") extra=106)
rpart.plot(fit, stop("no"), extra=106)
rpart.plot(fit, type=1, extra=106)
rpart.plot(fit, type=3, extra=106)
rpart.plot(fit, type=3, extra=106)
rpart.plot(fit, type=4, extra=106)
rpart.plot(fit, type=4, extra=106)
rpart.plot(fit, type=1, extra=106)
rpart.plot(fit, type=5, extra=106)
rpart.plot(fit, type=2, extra=106)
rpart.plot(fit, type=3, extra=106)
rpart.plot(fit, type=3, extra=2)
rpart.plot(fit, type=3, extra=106)
rpart.plot(fit, type=3, extra=4)
rpart.plot(fit, type=3, extra=106)
control <- rpart.control(minsplit = 4,
minbucket = round(5 / 3),
maxdepth = 7,
cp = 0)
tune_fit <- rpart(Churn~., data = traindf_ROSE, method = 'class', control = control)
accuracy_tune(tune_fit)
accuracy_tune <- function(fit) {
preds <- predict(fit, testdf, type = 'class')
results <- table(testdf$Churn, preds)
accuracy_Test <- sum(diag(results)) / sum(results)
accuracy_Test
}
control <- rpart.control(minsplit = 4,
minbucket = round(5 / 3),
maxdepth = 7,
cp = 0)
tune_fit <- rpart(Churn~., data = traindf_ROSE, method = 'class', control = control)
accuracy_tune(tune_fit)
rpart.plot(tune_fit)
control <- rpart.control(minsplit = 4,
minbucket = round(5 / 3),
maxdepth = 3,
cp = 0)
control <- rpart.control(minsplit = 4,
minbucket = round(5 / 3),
maxdepth = 3,
cp = 0)
tune_fit <- rpart(Churn~., data = traindf_ROSE, method = 'class', control = control)
accuracy_tune(tune_fit)
rpart.plot(tune_fit)
control <- rpart.control(minsplit = 4,
minbucket = round(5 / 3),
maxdepth = 5,
cp = 0)
tune_fit <- rpart(Churn~., data = traindf_ROSE, method = 'class', control = control)
accuracy_tune(tune_fit)
rpart.plot(tune_fit)
rpart.plot(tune_fit)
control <- rpart.control(minsplit = 4,
minbucket = round(5 / 3),
maxdepth = 4,
cp = 0.011)
tune_fit <- rpart(Churn~., data = traindf_ROSE, method = 'class', control = control)
accuracy_tune(tune_fit)
rpart.plot(tune_fit)
control <- rpart.control(minsplit = 4,
minbucket = round(5 / 3),
maxdepth = 15,
cp = 0.011)
tune_fit <- rpart(Churn~., data = traindf_ROSE, method = 'class', control = control)
accuracy_tune(tune_fit)
rpart.plot(tune_fit)
rpart.plot(tune_fit)
control <- rpart.control(minsplit = 4,
minbucket = round(5 / 3),
maxdepth = 15,
cp = 0.0)
tune_fit <- rpart(Churn~., data = traindf_ROSE, method = 'class', control = control)
accuracy_tune(tune_fit)
rpart.plot(tune_fit)
control <- rpart.control(minsplit = 4,
minbucket = round(5 / 3),
maxdepth = 5,
cp = 0.011)
tune_fit <- rpart(Churn~., data = traindf_ROSE, method = 'class', control = control)
accuracy_tune(tune_fit)
rpart.plot(tune_fit)
bag_model <- train(
Churn ~ .,
data = traindf_ROSE,
nbagg = 100,
trControl = trainControl(method = "cv", number = 10),
method = "treebag",
control = rpart.control(minsplit = 2, cp = 0)
)
bag_model
